\documentclass{article}
\usepackage[greek,english]{babel}
\usepackage{amsmath}
\usepackage{algorithm}
\usepackage{algorithmicx}
\usepackage{algpseudocode}
\usepackage{fullpage}
\usepackage{textgreek}


\begin{document}

\section*{Exercise 1}
\section*{\textgreek{Περιγραφή Αλγορίθμου: }}
\begin{enumerate}
    \item \textgreek{Αρχικοποίηση του πίνακα αποστάσεων:}
    \[
    \text{dist}[i][j] =
    \begin{cases}
    w(i, j), & \textgreek{αν υπάρχει ακμή } i \rightarrow j \\
    \infty, & \textgreek{διαφορετικά}
    \end{cases}
    \]
    \item \textgreek{Για κάθε κόμβο $k \in V$, και για κάθε ζεύγος κόμβων $i, j \in V$, βρίσκουμε τη συντομότερη διαδρομή μεταξύ $i$ και $j$}:
    \[
    \text{dist}[i][j] = \min(\text{dist}[i][j], \text{dist}[i][k] + \text{dist}[k][j])
    \]
    \item \textgreek{Ο συντομότερος κύκλος δίνεται από:}
    \[
    \min_{v \in V} \text{dist}[v][v]
    \]
    Αν $\text{dist}[v][v] = \infty$ \textgreek{για όλα τα $v$, τότε το γράφημα δεν περιέχει κύκλο.}
\end{enumerate}

\section*{\textgreek{Ψευδοκώδικας:}}

\begin{algorithm}
\caption{\textgreek{Συντομότερος Κατευθυνόμενος Κύκλος}}
\begin{algorithmic}[1]
\Statex \textgreek{Είσοδος: Γράφος $G = (V, A)$ με θετικά βάρη $w(u, v)$}
\Statex \textgreek{Έξοδος: Μήκος του συντομότερου κατευθυνόμενου κύκλου ή \texttt{None} αν δεν υπάρχει κύκλος}

\State Αρχικοποίησε τον πίνακα \texttt{dist[$n$][$n$]} ως εξής:
\ForAll{$i, j \in V$}
    \If{$i = j$}
        \State \texttt{dist[$i$][$j$]} $\gets 0$
    \ElsIf{$(i, j) \in A$}
        \State \texttt{dist[$i$][$j$]} $\gets w(i, j)$
    \Else
        \State \texttt{dist[$i$][$j$]} $\gets \infty$
    \EndIf
\EndFor

\For{$k = 1$ to $n$}
    \For{$i = 1$ to $n$}
        \For{$j = 1$ to $n$}
            \State \texttt{dist[$i$][$j$]} $\gets \min(\texttt{dist[$i$][$j$]}, \texttt{dist[$i$][$k$]} + \texttt{dist[$k$][$j$]})$
        \EndFor
    \EndFor
\EndFor

\State \texttt{minCycle} $\gets \infty$
\For{$v = 1$ to $n$}
    \State \texttt{minCycle} $\gets \min(\texttt{minCycle}, \texttt{dist[$v$][$v$]})$
\EndFor

\If{\texttt{minCycle = $\infty$}}
    \State \Return \texttt{None}
\Else
    \State \Return \texttt{minCycle}
\EndIf

\end{algorithmic}
\end{algorithm}

\section*{\textgreek{Ανάλυση Πολυπλοκότητας: }}

\textgreek{Ο αλγόριθμος αποτελείται από τρεις εμφωλευμένους βρόγχους επανάληψης. Έστω \( n = |V| \)}

\subsection*{Main Loop}

\textgreek{Υπολογίζουμε: }
\[
\text{dist}[i][j] = \min(\text{dist}[i][j], \text{dist}[i][k] + \text{dist}[k][j])
\]
\textgreek{για κάθε } \( i, j, k \in \{1, 2, \dots, n\} \).

\subsection*{\textgreek{Συνολικός αριθμός πράξεων τριπλού βρόγχου:} }

\textgreek{Αθροίζουμε ως προς όλους τους συνδυασμούς \( i, j, k \):}

\sum_{k=1}^{n} \sum_{i=1}^{n} \sum_{j=1}^{n} O(1) = O(n) \cdot O(n) \cdot O(n) = O(n^3)

\subsection*{\textgreek{Μετά από την επεξεργασία μέσω του τριπλού βρόγχου επανάληψης: }}

\textgreek{\textgreek{Έλεγχος διαγώνιων στοιχείων για την εύρεση συντομότερου κύκλου: }}
\[
\min_{v \in V} \text{dist}[v][v]
\]
\textgreek{Αυτό απαιτεί: }  \sum_{v=1}^{n} O(1) = O(n)  \textgreek{ πράξεις.}

\subsection*{\textgreek{Συνολική πολυπλοκότητα: }}

T(n) = \sum_{k=1}^{n} \sum_{i=1}^{n} \sum_{j=1}^{n} O(1) + \sum_{v=1}^{n} O(1) = O(n^3) 
+ O(n) = \mathcal{O}(n^3)



\section*{\textgreek{Απόδειξη Ορθότητας}}

\textgreek{Έστω $V = \{1, 2, \dots, n\}$ το σύνολο των κόμβων. Ορίζουμε τη συντομότερη διαδρομή από $i$ σε $j$ χρησιμοποιώντας μόνο ενδιάμεσους κόμβους από το υποσύνολο $\{1, 2, \dots, k\}$. Την ονομάζουμε $\delta_k(i,j)$. Η επαγωγική υπόθεση ορίζει ότι για κάθε $k$, ισχύει η εξής σχέση:}

\[
\delta_k(i,j) = \min \left\{ \delta_{k-1}(i,j),\ \delta_{k-1}(i,k) + \delta_{k-1}(k,j) \right\}
\]
\textgreek{
\begin{itemize}
    \item Για $k = 0$ (αν δεν υπάρχει ενδιάμεσος κόμβος ανάμεσα στους κόμβους $i$ και $j$), η $\delta_0(i,j)$ είναι:
    \[
    \delta_0(i,j) =
    \begin{cases}
    w(i,j), & \text{αν υπάρχει ακμή } (i,j) \in A \\
    \infty, & \text{διαφορετικά}
    \end{cases}
    \]
    \item Έστω ότι η πρόταση ισχύει για $k-1$, και εξετάζουμε την περίπτωση $k$:
    \begin{itemize}
        \item Αν η συντομότερη διαδρομή από $i$ σε $j$ **δεν περιλαμβάνει τον $k$** ως ενδιάμεσο κόμβο, τότε όλοι οι ενδιάμεσοι κόμβοι ανήκουν στο $\{1, \dots, k-1\}$ και:
        \[
        \delta_k(i,j) = \delta_{k-1}(i,j)
        \]
        \item Αν η διαδρομή περιλαμβάνει τον $k$ ως ενδιάμεσο, τότε διασπάται σε δύο διαδρομές:
        \[
        \delta_k(i,j) = \delta_{k-1}(i,k) + \delta_{k-1}(k,j)
        \]
        που σύμφωνα με την επαγωγική υπόθεση είναι σωστές.
    \end{itemize}
\end{itemize}
}
\textgreek{
Επομένως, η αναδρομική σχέση υπολογίζει σωστά το $\delta_k(i,j)$ για κάθε $k$, και τελικά το $\delta_n(i,j)$ είναι η συντομότερη διαδρομή από $i$ σε $j$.}

\subsection*{\textgreek{Εύρεση Κύκλου}}
\textgreek{
Η συντομότερη κατευθυνόμενη κυκλική διαδρομή είναι μια διαδρομή που ξεκινά και καταλήγει στον ίδιο κόμβο. Άρα για κάθε $v \in V$ η ποσότητα} $\text{dist}[v][v]$ \textgreek{περιέχει το μήκος της συντομότερης κυκλικής διαδρομής που περνά από το $v$.}

\textgreek{Το ελάχιστο αυτών:}
\[
\min_{v \in V} \text{dist}[v][v]
\]
\textgreek{είναι το μήκος του συντομότερου κατευθυνόμενου κύκλου.}



\section*{Exercise 3}

\begin{algorithm}[H]
\caption{\textgreek{Ενημέρωση ΕΕΔ μετά από Αλλαγή Βάρους Ακμής}}
\begin{algorithmic}[1]
\Statex \textgreek{Είσοδος: $G = (V, E)$, λίστα με όλες τις ακμές $graph\_edges$, αρχικό MST $mst\_edges$, ακμή $(u, v)$, νέο βάρος $new\_weight$}
\Statex \textgreek{Έξοδος: Το ενημερωμένο ΕΕΔ μετά την αλλαγή βάρους}

\State \textgreek{Αρχικοποίησε} \texttt{old\_weight} $\gets$ \texttt{None}

\ForAll{\texttt{e} \textgreek{στο} \texttt{graph\_edges}}
    \If{$(e.u = u \land e.v = v)$ \text{or} $(e.u = v \land e.v = u)$}
        \State \texttt{old\_weight} $\gets$ \texttt{e.weight}
        \State \texttt{e.weight} $\gets$ \texttt{new\_weight}
        \State \textbf{break}
    \EndIf
\EndFor

\If{\texttt{old\_weight = None}}
    \State \textbf{raise} \texttt{Error("Edge not found")}
\EndIf

\State \textgreek{Έλεγχος αν η ακμή υπάρχει στο ΕΕΔ}
\State \texttt{edge\_in\_mst} $\gets$ \texttt{None}

\ForAll{$i$ \textgreek{και} \texttt{e} \textgreek{στο} \texttt{mst\_edges}}
    \If{$(e.u = u \land e.v = v)$ \textgreek{ή} $(e.u = v \land e.v = u)$}
        \State \texttt{edge\_in\_mst} $\gets$ \texttt{e}
        \State \texttt{mst\_edges[$i$].weight} $\gets$ \texttt{new\_weight}
        \State \textbf{break}
    \EndIf
\EndFor

\If{\texttt{edge\_in\_mst} \textgreek{και} \texttt{new\_weight > old\_weight}}
    \State \Return \texttt{HandleWeightIncrease($V$, $graph\_edges$, $mst\_edges$, $edge\_in\_mst$)}
\ElsIf{\texttt{edge\_in\_mst = None} \textgreek{και} \texttt{new\_weight < old\_weight}}
    \State \Return \texttt{HandleWeightDecrease($V$, $graph\_edges$, $mst\_edges$, $u$, $v$, $new\_weight$)}
\Else
    \State \Return \texttt{mst\_edges}
\EndIf
\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]
\caption{\textnormal{HandleWeightIncrease:}}
\begin{algorithmic}[1]
\Statex \textgreek{Είσοδος: $V$, λίστα ακμών $graph\_edges$, $mst\_edges$, ακμή προς αφαίρεση $edge\_to\_remove$}
\Statex \textgreek{Έξοδος: Ενημερωμένο ΕΕΔ μετά από πιθανή αντικατάσταση ακμής}

\State \textgreek{Δημιούργησε λίστα γειτνίασης χωρίς την $edge\_to\_remove$}
\State \texttt{adj\_list} $\gets$ [[] \textbf{for} $0 \leq i < V$]
\ForAll{\texttt{e} \textgreek{στο} \texttt{mst\_edges}}
    \If{\texttt{e $\neq$ edge\_to\_remove}}
        \State \texttt{adj\_list[e.u].append(e.v)}
        \State \texttt{adj\_list[e.v].append(e.u)}
    \EndIf
\EndFor

\State \texttt{visited} $\gets$ \textgreek{πίνακας} $[False]$ \textgreek{μεγέθους} $V$
\State \texttt{component} $\gets \emptyset$

\State \Call{DFS}{$edge\_to\_remove.u$}

\If{$edge\_to\_remove.v \in$ \texttt{component}}
    \State \Return \texttt{mst\_edges} \Comment{\textgreek{Ο γράφος παραμένει συνεκτικός}}
\EndIf

\State \textgreek{Αναζήτηση ακμής ελάχιστου βάρους που ενώνει τα 2} \textnormal{components}
\State \texttt{min\_edge} $\gets$ \texttt{None}
\ForAll{\texttt{e} \textgreek{στο} \texttt{graph\_edges}}
    \State \texttt{u\_in} $\gets (e.u \in$ \texttt{component)}
    \State \texttt{v\_in} $\gets (e.v \in$ \texttt{component)}
    \If{\texttt{u\_in $\neq$ v\_in}}
        \If{\texttt{min\_edge = None} \textbf{or} \texttt{e.weight < min\_edge.weight}}
            \State \texttt{min\_edge $\gets$ e}
        \EndIf
    \EndIf
\EndFor

\State \texttt{new\_mst} $\gets$ \texttt{mst\_edges} \textgreek{χωρίς την} \text{$edge\_to\_remove$}
\If{\texttt{min\_edge $\neq$ None}}
    \State \texttt{new\_mst.append(min\_edge)}
\EndIf

\State \Return \texttt{new\_mst}

\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]
\caption{\textnormal{HandleWeightDecrease:}}
\begin{algorithmic}[1]
\Statex \textgreek{Είσοδος: $V$, $graph\_edges$, $mst\_edges$, ακμή $(u, v)$ με νέο βάρος $new\_weight$}
\Statex \textgreek{Έξοδος: Ενημερωμένο ΕΕΔ αν η νέα ακμή αντικαθιστά υπάρχουσα}

\State \textgreek{Δημιουργία λίστας γειτνίασης από το ΕΕΔ}
\State \texttt{adj\_list} $\gets$ [[] \textbf{for} $0 \leq i < V$]
\ForAll{\texttt{e} \textgreek{στο} \texttt{mst\_edges}}
    \State \texttt{adj\_list[e.u].append((e.v, e))}
    \State \texttt{adj\_list[e.v].append((e.u, e))}
\EndFor

\State \textgreek{Εύρεση διαδρομής από $u$ σε $v$ στο ΕΕΔ με} \textnormal{DFS}
\State \texttt{visited, parent, edge\_to\_parent} $\gets$ \textgreek{πίνακες μεγέθους $V$}

\If{\textbf{not} \Call{DFS}{$u$, $v$}}
    \State \Return \texttt{mst\_edges}
\EndIf

\State \textgreek{Βρες ακμή μέγιστου βάρους στη διαδρομή}
\State \texttt{curr} $\gets v$, \texttt{max\_edge} $\gets$ \texttt{None}
\While{$curr \neq u$}
    \State \texttt{edge} $\gets$ \texttt{edge\_to\_parent[curr]}
    \If{\texttt{max\_edge = None} \textbf{or} \texttt{edge.weight > max\_edge.weight}}
        \State \texttt{max\_edge $\gets$ edge}
    \EndIf
    \State \texttt{curr $\gets$ parent[curr]}
\EndWhile

\If{\texttt{max\_edge.weight > new\_weight}}
    \State \texttt{new\_mst} $\gets$ \textgreek{$mst\_edges$ χωρίς την $max\_edge$}
    \State \texttt{new\_mst.append(Edge(u, v, new\_weight))}
    \State \Return \texttt{new\_mst}
\Else
    \State \Return \texttt{mst\_edges}
\EndIf
\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]
\caption{\textnormal{DFS} \textgreek{της} \textnormal{(HandleWeightIncrease)}}
\begin{algorithmic}[1]
\Statex \textgreek{Είσοδος: Κόμβος εκκίνησης $node$}
\Statex \textgreek{Μεταβλητές: πίνακας} \texttt{visited}, \textgreek{σύνολο} \texttt{component}, \textgreek{λίστα γειτνίασης} \texttt{adj\_list}

\Procedure{DFS}{$node$}
    \State \texttt{visited[node]} $\gets$ \texttt{True}
    \State \texttt{component.add(node)}
    \ForAll{\texttt{neighbor} \textbf{in} \texttt{adj\_list[node]}}
        \If{\texttt{not visited[neighbor]}}
            \State \Call{DFS}{neighbor}
        \EndIf
    \EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\begin{algorithm}[H]
\caption{\textgreek{$DFS$ για εύρεση διαδρομής από $u$ σε $v$ στο ΕΕΔ} \textnormal{(HandleWeightDecrease)}}
\begin{algorithmic}[1]
\Statex \textgreek{Είσοδος: $u$, $v$, λίστα γειτνίασης $adj\_list$ από ΕΕΔ}
\Statex \textgreek{Έξοδος: Πίνακες} \texttt{parent} \textgreek{και} \texttt{edge\_to\_parent} \textgreek{που περιγράφουν τη διαδρομή από $u$ σε $v$}

\State \texttt{visited} $\gets$ \textgreek{πίνακας} $[False]$ \textgreek{μεγέθους} $V$
\State \texttt{parent} $\gets$ \textgreek{πίνακας} $[-1]$ \textgreek{μεγέθους} $V$
\State \texttt{edge\_to\_parent} $\gets$ \textgreek{πίνακας} $[None]$ \textgreek{μεγέθους} $V$

\Function{DFS}{$node$, $target$}
    \If{$node = target$}
        \State \Return \texttt{True}
    \EndIf
    \State \texttt{visited[node]} $\gets$ \texttt{True}
    \ForAll{$(neighbor, edge)$ \textbf{in} \texttt{adj\_list[node]}}
        \If{\texttt{not visited[neighbor]}}
            \State \texttt{parent[neighbor]} $\gets$ \texttt{node}
            \State \texttt{edge\_to\_parent[neighbor]} $\gets$ \texttt{edge}
            \If{\Call{DFS}{$neighbor$, $target$}}
                \State \Return \texttt{True}
            \EndIf
        \EndIf
    \EndFor
    \State \Return \texttt{False}
\EndFunction
\end{algorithmic}
\end{algorithm}



\end{document}
